examples(
)
install.packages("arules")
install.packages("e1071")
data = read.csv("data/BASKETS1n")
data(iris)
m = naiveBayes(Species ~ ., data=iris)
install.packages("e1071")
m = naiveBayes(Species ~ ., data=iris)
m = naiveBayes(iris[, -5], iris[, 5])
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
m = naiveBayes(Species ~ ., data=iris)
iris
naiveBayes.default(x = iris[, -5], y = iris[, 5])
m
iris[, 5]
table(predict(m, iris), iris[,5])
head(iris)
colMeans(iris[, 1:3])
library(ggplot2)
plot_dif = function(miu=3, tau=1) {
i = seq(100, 10000, by=10)
set.seed(123)
meanCompare = function(n=100, miu=3, tau=1) {
x = rnorm(n, 3, 5)
(var(x)*miu+tau^2*mean(x))/(var(x)+tau^2)-3
}
aa = sapply(i, meanCompare, miu=miu, tau=tau)
bb = sapply(i,function(i) mean(rnorm(i,3,5))-3)
g = ggplot(data.frame(i=i, a=aa, b=bb)) +
geom_line(aes(x=i ,y=b), col="blue") +
geom_line(aes(x=i, y=a), col="red")
print(g)
}
install.packages("ggplot2")
library(ggplot2)
demo()
install.packages("cnn")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
cat("Hello world!\n")
cat
plotting
?plotting
?cat
??plotting
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
??ggplot2
?ggplot2
getwd()
getwd()
R.home()
path.expand("~")
R
R.home()
R.help()
R
factorial(7)
choose(5, 0:5)
x <- c(0, Inf, -Inf, NaN, NA)
x
is.finite(x)
is.infinite(x)
!is.finite(x)
is.nan(x)
is.na(x)
swiss <- read.table("http://paultrowbridge.info/teach/nyu/viz/data/swiss.dat",header=TRUE,sep="\t")
swiss
head(swiss)
births <- read.csv(file="http://paultrowbridge.info/teach/nyu/viz/data/births.csv",header=TRUE)
head(births)
births <- read.csv(file="http://paultrowbridge.info/teach/nyu/viz/data/births.csv",header=TRUE)
head(births)
dat <- read.table(file="data/fev.dat.txt",header=FALSE,colClasses=c("numeric","numeric","numeric","factor","factor"))
olive <- read.csv(file="data/olive.txt",header=TRUE,quote="'")
dat <- read.csv(file="data/Cancer-Mortality-Rates-by-County-in-Texas.csv",skip=2,header=TRUE,na.strings="  ~")
library(foreign)
gss <- suppressWarnings(read.spss("http://paultrowbridge.info/teach/nyu/viz/data/GSS2012.sav",to.data.frame=TRUE))
mmreg <- read.dta("http://paultrowbridge.info/teach/nyu/viz/data/mmreg.dta")
genotype <- read.xport("data/genotype.xpt")
write.foreign()
ls()
x <- data.frame(a = I("a \" quote"), b = pi)
write.table(x, file = "foo.csv", sep = ",", col.names = NA,
qmethod = "double")
## and to read this file back into R one needs
read.table("foo.csv", header = TRUE, sep = ",", row.names = 1)
##           a        b
## 1 a " quote 3.141593
## NB: you do need to specify a separator if qmethod = "double".
### Alternatively
write.csv(x, file = "foo.csv")
read.csv("foo.csv", row.names = 1)
##           a        b
## 1 a " quote 3.141593
## or without row names
write.csv(x, file = "foo.csv", row.names = FALSE)
read.csv("foo.csv")
##           a        b
## 1 a " quote 3.141593
saveRDS(women, "women.rds")
women2 <- readRDS("women.rds")
identical(women, women2)
## [1] TRUE
con <- gzfile("women.rds")
women3 <- readRDS(con)
close(con)
head(women3)
##   height weight
## 1     58    115
## 2     59    117
## 3     60    120
## 4     61    123
## 5     62    126
## 6     63    129
ls()
write.foreign()
library(foreign)
write.foreign()
R.str()
women3.str()
women3.str().str()
str(). str()
str(women3)
str(R)
str(women3)
str().str(women3)
str(women3)
typeof(women3)
length(women3)
attributes(women3)
dbl_var <- c(1, 2.5, 4.5)
int_var <- c(1L, 6L, 10L)
int_var
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
is.numeric(int_var)
## [1] TRUE
is.numeric(dbl_var)
## [1] TRUE
str(c("a", 1))
##  chr [1:2] "a" "1"
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
## [1] 0 0 1
# Total number of TRUEs
sum(x)
## [1] 1
# Proportion that are TRUE
mean(x)
## [1] 0.3333333
x
x
as.numeric(x)
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
x
x <- list(list(list(list())))
str(x)
is.recursive(x)
x
x
str(x)
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(x)
## List of 2
##  $ :List of 2
##   ..$ : num 1
##   ..$ : num 2
##  $ : num [1:2] 3 4
str(y)
## List of 4
##  $ : num 1
##  $ : num 2
##  $ : num 3
##  $ : num 4
x
y
is.list(mtcars)
## [1] TRUE
mod <- lm(mpg ~ wt, data = mtcars)
is.list(mod)
## [1] TRUE
quit("no")
pwd
pwd()
ls()
x<-"1"
q("no")
install_github('jimhester/lintr')
library(devtools)
install.packages("devtools")
library(devtools)
install_github('jimhester/lintr')
y <- 1:10
attr(y, "my_attribute") <- "This is a vector"
attr(y, "my_attribute")
y
str(attributes(y))
attributes(y)
structure(1:10, my_attribute = "This is a vector")
attributes(y[1])
## NULL
attributes(sum(y))
## NULL
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(sex_factor)
sex_char <- c("m", "m", "s")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_factor)
library(lintr)
library(lint)
library(lintr)
repeat{g<- rnorm(1)}
# Two scalar arguments to specify rows and columns
a <- matrix(1:6, ncol = 3, nrow = 2)
# One vector argument to describe all dimensions
b <- array(1:12, c(2, 3, 2))
a
v
b
length(a)
a
nrow(a)
rownames(a) <- c("A", "B")
colnames(a) <- c("a", "b", "c")
a
a
str(1:3)                   # 1d vector
##  int [1:3] 1 2 3
str(matrix(1:3, ncol = 1)) # column vector
##  int [1:3, 1] 1 2 3
str(matrix(1:3, nrow = 1)) # row vector
##  int [1, 1:3] 1 2 3
str(array(1:3, 3))         # "array" vector
##  int [1:3(1d)] 1 2 3
l <- list(1:3, "a", TRUE, 1.0)
dim(l) <- c(2, 2)
l
v
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
str(df)
df
str(df)
ls()
df <- data.frame(
x = 1:3,
y = c("a", "b", "c"),
stringsAsFactors = FALSE)
str(df)
typeof(df)
## [1] "list"
class(df)
## [1] "data.frame"
is.data.frame(df)
## [1] TRUE
cbind(df, data.frame(z = 3:1))
df
rbind(df, data.frame(x = 10, y = "z"))
bad <- data.frame(cbind(a = 1:2, b = c("a", "b")))
str(bad)
bad
bad
good <- data.frame(a = 1:2, b = c("a", "b"),
stringsAsFactors = FALSE)
str(good)
str(bad
)
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)
df
data.frame(x = 1:3, y = list(1:2, 1:3, 1:4))
?control
??control
N <- 10
x1 <- rnorm(N)
x2 <- rnorm(N) + x1 + 1
male <- rbinom(N,1,.48)
y <- 1 + x1 + x2 + male + rnorm(N)
mydat <- data.frame(y,x1,x2,male)
apply(mydat,1,mean) # applies the function to each row
x1
x2
plot(x1)
plot(x2)
plot(mydata)
plot(mydat)
apply(mydat,2,mean) # applies the function to each column
mydat
lapply(mydat,mean) # returns a list
plot(mydat)
sapply(mydat,mean) # returns a vector
tapply(mydat$y,mydat$male,mean) # applies the function to each level of the factor
repeat {
g <- rnorm(1)
if (g > 1.0) break
cat(g,"\n")
}
g
plot(g)
bar <- function(a,b,c){
return(c(a = a, b = b, c = c))
}
bar(1,2,3)
bar(4,1,9)
bar
plot(bar)
a
b
c
c<-1
plot(bar)
c
b
bar(4,1,9)
bar
bar(a = 1, c = 3, b = 2)
## a b c
## 1 2 3
bar(c = 3, b = 2, a = 1)
## a b c
## 1 2 3
install.packages("reshape2")
library(reshape2)
dcast(data=subdata,
formula=Species ~ .,
value.var='Petal.Width',
fun=mean)
subdata = iris[ ,4:5]
subdata[c(1,51, 101), ]
iris_long = melt(data=iris,
id='Species'
)
set.seed(
5
)
i = sample(nrow(iris_long), 10
)
iris_long[i, ]
help("melt")
help(seq)
install.packages(dplyr)
install.packages("dplyr")
setwd("/Users/avi/Dropbox (Personal)/programming/boxer/data")
GradSchools = read.table("06GraduateSchools.txt")
head(GradSchools)
summary(GradSchools) #Looking at the five number summary information.
sapply(GradSchools, sd) #Looking at the individual standard deviations.
sapply(GradSchools, class) #Looking at the variable classes.
table(GradSchools$admit)/nrow(GradSchools) #Manually calculating the proportions.
table(GradSchools$admit, GradSchools$rank) #Checking to see that we have data
#available in all combinations of
#the categorical variables.
plot(GradSchools, col = GradSchools$admit + 2) #Basic graphical EDA.
table(GradSchools$admit)/nrow(GradSchools) #Manually calculating the proportions.
table(GradSchools$admit, GradSchools$rank) #Checking to see that we have data
#available in all combinations of
#the categorical variables.
plot(GradSchools, col = GradSchools$admit + 2) #Basic graphical EDA.
table(GradSchools$admit)/nrow(GradSchools) #Manually calculating the proportions.
table(GradSchools$admit, GradSchools$rank) #Checking to see that we have data
#available in all combinations of
#the categorical variables.
plot(GradSchools, col = GradSchools$admit + 2) #Basic graphical EDA.
table(GradSchools$admit)/nrow(GradSchools) #Manually calculating the proportions.
table(GradSchools$admit, GradSchools$rank) #Checking to see that we have data
#available in all combinations of
#the categorical variables.
plot(GradSchools, col = GradSchools$admit + 2) #Basic graphical EDA.
